y <- 3
y
## Lista objetos
ls()
## Remove objetos
rm(x)
## Lista objetos
ls()
## Remove objetos
rm(x)
## Lista objetos
ls()
## Lista objetos
ls()
## Remove objetos
rm(x)
## Lista objetos
ls()
## Lista objetos
ls()
## Remove objetos
rm(f)
## Lista objetos
ls()
ls()
# Busca
search()
# Lista o conteúdo de um pacote
ls("package:datasets")
WorldPhones <- 10986
WorldPhones
# Instalar o pacote
("ggplot2")
# Carregar o pacote
( )
# Carregar o pacote
library(ggplot2)
# Carregar o pacote
library(ggplot2)
# Verificar o conteúdo
("package:ggplot2")
# Documentação do pacote
(package = "ggplot2")
# Caminhos de instalação
()
# Remover o pacote da sessão
("package:ggplot2",
# Instalar o pacote
("ggplot2")
# Carregar o pacote
library(ggplot2)
# Verificar o conteúdo
("package:ggplot2")
# Documentação do pacote
(package = "ggplot2")
# Caminhos de instalação
()
# Caminhos de instalação
.libPaths()
# Instalar o pacote
("ggplot2")
# Carregar o pacote
library(ggplot2)
# Verificar o conteúdo
("package:ggplot2")
# Documentação do pacote
(package = "ggplot2")
# Caminhos de instalação
.libPaths()
# Remover o pacote da sessão
#("package:ggplot2", unload = TRUE)
## Somando dois números
2 + 2
x <- 2
x
y <- x+x
y
knitr::opts_chunk$set(echo = TRUE)
## Somando dois números
2 + 2
## Quantos segundos tem uma hora?
## Cada minuto tem 60 segundos,
## cada hora tem 60 minutos
60 * 60
## Atribuindo um valor a um objeto
x <- 2
x
y <- 3
y
## Lista objetos
ls()
## Remove objetos
rm(x)
## Lista objetos
ls()
ls()
# Busca
search()
# Lista o conteúdo de um pacote
ls("package:datasets")
WorldPhones <- 10986
WorldPhones
# Instalar o pacote
("ggplot2")
# Carregar o pacote
library(ggplot2)
# Verificar o conteúdo
("package:ggplot2")
# Documentação do pacote
(package = "ggplot2")
# Caminhos de instalação
.libPaths()
# Remover o pacote da sessão
#("package:ggplot2", unload = TRUE)
# Instalar o pacote
#install.packages("ggplot2")
# Carregar o pacote
library(ggplot2)
# Verificar o conteúdo
ls("package:ggplot2")
# Documentação do pacote
#help(package = "ggplot2")
# Caminhos de instalação
.libPaths()
# Remover o pacote da sessão
#("package:ggplot2", unload = TRUE)
# Verificar o conteúdo
head(ls("package:ggplot2"))
# Verificar o conteúdo
head(ls("package:ggplot2"), 20)
# Verificar o conteúdo
head(ls("package:ggplot2"), 30)
# Exemplo de manipulação de expressões
x <- 5
y<-10 # Não recomendado, espaços são mais legíveis
z <- (x +
y) # Continuando o comando em outra linha
x # imprime na tela o valor de x
y # imprime o valor de y
z # imprime o valor de z
# Exemplo de diferenciação de letras maiúsculas e minúsculas
variavel <- 42
Variavel <- 24
variavel
Variavel
numeros <- (1, 2, 3, 4, 5)
numeros <- (1, 2, 3, 4, 5)
numeros <- (1; 2, 3, 4, 5)
letras <- ("a", "b", "c", "d", "e")
numeros <- c(1, 2, 3, 4, 5)
numeros
letras <- c("a", "b", "c", "d", "e")
letras
logicos <- c(TRUE, FALSE, TRUE, FALSE)
logicos
## Coerção
vetor <- c(numeros, letras, logicos)
vetor
# Acessa o primeiro elemento
numeros[1]
# Acessa o terceiro elemento
letras[3]
# Acessa o segundo elemento
logicos[2]
# Acessa o quinto elemento
vetor[5]
# Funções que começam com `is.`
# retornam TRUE ou FALSE
# Lista funções is.
apropos("^is\\.")
# Verifica se é inteiro
is.integer(numeros)
# Verifica se é numérico
is.numeric(numeros)
# Verifica se é caracter
is.character(letras)
# Verifica se é lógico
is.logical(logicos)
fator = factor( ("Tipo 1", "Tipo 2"))
fator = factor( c("Tipo 1", "Tipo 2", "Tipo 3"))
# Verifica se é fator
is.factor(fator)
# Converte para caracter
as.character(numeros)
# Funções que começam com `as.`
# Lista funções as.
apropos("^as\\.")
# Converte para caracter
as.character(numeros)
# Funções que começam com `as.`
# Lista funções as.
head(apropos("^as\\."),15)
## Apaga todos os objetos
rm(list = ls())
## Lista objetos
ls()
# Funções que começam com `as.`
# Lista funções as.
head(apropos("^as\\."),15)
# Converte para caracter
as.character(numeros)
# Funções que começam com `as.`
# Lista funções as.
head(apropos("^as\\."),15)
# Converte para caracter
as.character(numeros)
knitr::opts_chunk$set(echo = TRUE)
## Somando dois números
2 + 2
## Quantos segundos tem uma hora?
## Cada minuto tem 60 segundos,
## cada hora tem 60 minutos
60 * 60
## Atribuindo um valor a um objeto
x <- 2
x
y <- 3
y
## Lista objetos
ls()
## Remove objetos
rm(x)
## Lista objetos
ls()
## Apaga todos os objetos
rm(list = ls())
## Lista objetos
ls()
ls()
# Busca
search()
# Lista o conteúdo de um pacote
ls("package:datasets")
WorldPhones <- 10986
WorldPhones
# Buscando pela documentação
#?mean
#help(mean)
# Buscando por termos
#??mean
#help.search("mean")
#apropos("mean")
# Vignettes
#browseVignettes(package = "ggplot2")
# Busca pelo termo no r-project.org
#RSiteSearch("mean")
# Exemplo de manipulação de expressões
x <- 5
y<-10 # Não recomendado, espaços são mais legíveis
z <- (x +
y) # Continuando o comando em outra linha
x # imprime na tela o valor de x
y # imprime o valor de y
z # imprime o valor de z
# Exemplo de diferenciação de letras maiúsculas e minúsculas
variavel <- 42
Variavel <- 24
variavel
Variavel
1 + 1 # Adição
2 - 1 # Subtração
3 * 2 # Multiplicação
4 / 2 # Divisão
5 ^ 2 # Potenciação
5 %% 2 # Resto da divisão
5 %/% 2 # Divisão inteira
log(10) # Logarítimo natural
exp(10) # Exponencial
log10(100) # Logarítimo base 10
log2(10) # Logarítimo base 2
log(100, base = 8) # Log. base 8
sin(0) # Seno
cos(0) # Cosseno
tan(0) # Tangente
asin(0) # Arco seno
acos(0) # Arco cosseno
atan(0) # Arco tangente
round(pi, digits = 2) # Arredondament
ceiling(pi) # Teto
floor(pi) # Piso
trunc(pi) # Truncamento
1 == 1 # Igual
1 != 2 # Diferente
1 > 2 # Maior
1 < 2 # Menor
1 >= 1 # Maior ou Igual
2 >= 1 # Menor ou Igual
a <- 1
b <- 2
a <= b
(1 == 1) & (2 == 2) # E / AND
(1 == 1) | (2 == 3) # OU / OR
!(1 == 2) # NÃO / NOT
"R" == "r" # Comparação de strings
"a" < "b" # Ordem Alfanumérica
"1" < "2" # Ordem Alfanumérica
numeros <- c(1, 2, 3, 4, 5)
numeros
letras <- c("a", "b", "c", "d", "e")
letras
logicos <- c(TRUE, FALSE, TRUE, FALSE)
logicos
## Coerção
vetor <- c(numeros, letras, logicos)
vetor
# Acessa o primeiro elemento
numeros[1]
# Acessa o terceiro elemento
letras[3]
# Acessa o segundo elemento
logicos[2]
# Acessa o quinto elemento
vetor[5]
# Funções que começam com `is.`
# retornam TRUE ou FALSE
# Lista funções is.
apropos("^is\\.")
# Verifica se é inteiro
is.integer(numeros)
# Verifica se é numérico
is.numeric(numeros)
# Verifica se é caracter
is.character(letras)
# Verifica se é lógico
is.logical(logicos)
fator = factor( c("Tipo 1", "Tipo 2", "Tipo 3"))
# Verifica se é fator
is.factor(fator)
# Funções que começam com `as.`
# Lista funções as.
head(apropos("^as\\."),15)
# Converte para caracter
as.character(numeros)
# Converte para numérico
as.numeric(fator)
datas <- c("2021-01-01", "2021-01-02"
# Converte para data
as.Date(datas)
datas <- c("2021-01-01", "2021-01-02", "2021-01-03")
# Converte para data
as.Date(datas)
datas
# Funções que começam com `as.`
# Lista funções as.
head(apropos("^as\\."),15)
# Converte para caracter
as.character(numeros)
# Converte para numérico
as.numeric(fator)
datas <- c("2021-01-01", "2021-01-02", "2021-01-03")
# Converte para data
as.Date(datas)
datas
class(datas)
install.packages("datasets")
#class()
class(numeros)
class(letras)
class(logicos)
class(datas)
head(women)
women <- 10986
women
datasets::women
methods(class = "numeric")
methods(class = "character")
## Podemos ter um vetor numérico com
altura <- ("João" = 1.82,
methods(class = "numeric")
methods(class = "character")
## Podemos ter um vetor numérico com
altura <- c("João" = 1.82,
"Bianca" = 1.68,
"Eduarda" = 1.62)
class(altura)
attributes(altura)
names(altura)
# Sequência de 1 a 10
seq1 <- c(1, 10)
seq1
seq
# [1] 1 2 3 4 5 6 7 8 9 10
# Sequência de 10 a 1, de 2 em 2
seq2 <- c(10, 1, by = -2)
seq2
seq
# [1] 10 8 6 4 2
# Repete 1, 2 e 3, 3 vezes
rep1 <- rep( c(1, 2, 3), times = 3)
rep1
#[1] 1 2 3 1 2 3 1 2 3
# Repete 1, 2 e 3, 3 vezes cada
rep2 <- rep(c(1, 2, 3), each = 3)
rep2
#[1] 1 1 1 2 2 2 3 3 3
# 5 Números aleatórios entre 0 e 1
runif(5)
# [1] 0.72837130 0.86886759 0.04289164 0.47154488 0.70211836
# 5 Números aleatórios de uma normal, com média 0 e desvio padrão 1
rnorm(5)
# [1] -0.47879958 0.06497995 -0.48012593 1.19685144 0.69212656
# Amostras aleatórias
sample(numeros,
size = 3,
replace = FALSE)
# [1] 5 2 3
sample(letras,
size = 5,
replace = TRUE)
# [1] "d" "a" "b" "e" "a"
set.seed(123)
set.seed(123)
# 5 Números aleatórios entre 0 e 1
runif(5)
# [1] 0.72837130 0.86886759 0.04289164 0.47154488 0.70211836
# 5 Números aleatórios de uma normal, com média 0 e desvio padrão 1
rnorm(5)
# [1] -0.47879958 0.06497995 -0.48012593 1.19685144 0.69212656
# Amostras aleatórias
sample(numeros,
size = 3,
replace = FALSE)
# [1] 5 2 3
sample(letras,
size = 5,
replace = TRUE)
# [1] "d" "a" "b" "e" "a"
set.seed(123)
# 5 Números aleatórios entre 0 e 1
runif(5)
# [1] 0.72837130 0.86886759 0.04289164 0.47154488 0.70211836
# 5 Números aleatórios de uma normal, com média 0 e desvio padrão 1
rnorm(5)
# [1] -0.47879958 0.06497995 -0.48012593 1.19685144 0.69212656
# Amostras aleatórias
sample(numeros,
size = 3,
replace = FALSE)
# [1] 5 2 3
sample(letras,
size = 5,
replace = TRUE)
# [1] "d" "a" "b" "e" "a"
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggh4x)
library(datasets) #dados para testes
df <- data.frame(x = y)
df
#ggplot(y, aes(x)) +
#  geom_histogram( stat = "count")
## NÃO FUNCIONA PQ PRECISA SER DATA FRAME
df <- data.frame(x = rpois(100, lambda = 3))
df
ggplot(df, aes(x)) +
geom_histogram( stat = "count")
alturas <- c("João" = 1.82,
"Bianca" = 1.68,
"Carlos" = 1.75,
"Ana" = 1.70)
# Seleciona o primeiro elemento
alturas[1]
# Seleciona até o terceiro elemento
alturas[1:3]
# Seleciona elementos 1, 3 e 4
alturas[c(1, 3, 4)]
# remove o segundo elemento
alturas[-2]
# Seleciona o primeiro elemento
print("o primeiro elemento")
alturas[1]
alturas <- c("João" = 1.82,
"Bianca" = 1.68,
"Carlos" = 1.75,
"Ana" = 1.70)
# Seleciona o primeiro elemento
print("o primeiro elemento")
alturas[1]
# Seleciona até o terceiro elemento
alturas[1:3]
# Seleciona elementos 1, 3 e 4
alturas[c(1, 3, 4)]
# remove o segundo elemento
alturas[-2]
alturas <- c("João" = 1.82,
"Bianca" = 1.68,
"Carlos" = 1.75,
"Ana" = 1.70)
# Seleciona o primeiro elemento
print("Seleciona o primeiro elemento")
alturas[1]
# Seleciona até o terceiro elemento
print("Seleciona até o terceiro elemento")
alturas[1:3]
# Seleciona elementos 1, 3 e 4
print("Seleciona elementos 1, 3 e 4")
alturas[c(1, 3, 4)]
# remove o segundo elemento
print("remove o segundo elemento")
alturas[-2]
install.packages("BiocManager")
BiocManager::install(msdata)
BiocManager::install("msdata")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
#library(BiocManager)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.19")
install.packages("installr")
library(installr)
updateR()
